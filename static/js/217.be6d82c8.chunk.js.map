{"version":3,"file":"static/js/217.be6d82c8.chunk.js","mappings":"8RAEaA,GAAUC,E,QAAAA,IAAO,KAAPA,CAAH,oMAGL,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,UAAUC,CAAtB,IAED,SAAAH,GAAC,OAAIA,EAAEC,MAAMG,MAAM,EAAlB,I,SCID,SAASC,IACtB,IAAMC,GAAkBC,EAAAA,EAAAA,MACxB,GAAwBC,EAAAA,EAAAA,UAA8B,MAAtD,eAAOC,EAAP,KAAaC,EAAb,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,YACR,uBAAC,qHAE0BC,EAAAA,EAAAA,IAAeN,GAFzC,gBAEWG,EAFX,EAEWA,KACRC,EAAQD,GAHX,iDAKGI,EAAAA,EAAAA,IAAM,KAAMC,SALf,wDAAD,EAQD,GAAE,CAACR,IAEAG,GACFM,EAAAA,GAAAA,WAAyB,MAIzB,8BACGN,IACC,SAACX,EAAD,UACGW,EAAKO,KAAI,YAAiD,IAA9CC,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UAClCC,EAAUF,EA1BX,kCA2BUA,EACXG,EACJ,OACE,2BACE,gBAAKC,IAAKF,EAASG,IAAKN,EAAMO,MAAM,KAAKC,OAAO,QAChD,uBAAIR,KACJ,uCAAeE,OAHRH,EAMZ,OAKV,C,mMCjDDU,IAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAU,mCAKHC,EAAa,yCAAG,WAAOC,GAAP,8FACJH,IAAAA,IACrB,oBACE,IAAII,gBAAgB,CAClBH,QAAAA,EACAE,KAAAA,KALqB,cACrBE,EADqB,OASrBC,EAAOD,EAASC,KATK,kBAUpB,CACLC,QAASD,EAAKC,QACdJ,KAAMG,EAAKH,KACXK,WAAYF,EAAKG,cAbQ,2CAAH,sDAiBbC,EAAW,yCAAG,WAAOC,GAAP,mGAAsBR,EAAtB,+BAAqC,EAArC,SACFH,IAAAA,IACrB,gBACE,IAAII,gBAAgB,CAClBH,QAAAA,EACAU,MAAAA,EACAC,SAAU,QACVT,KAAMA,EACNU,eAAe,KARI,cACnBR,EADmB,OAYnBC,EAAOD,EAASC,KAZG,kBAalB,CACLC,QAASD,EAAKC,QACdJ,KAAMG,EAAKH,KACXK,WAAYF,EAAKG,cAhBM,2CAAH,sDAoBXK,EAAc,yCAAG,WAAOC,GAAP,8FACLf,IAAAA,IACrB,gBAASe,EAAT,KACE,IAAIX,gBAAgB,CAClBH,QAAAA,EACAW,SAAU,WALY,cACtBP,EADsB,OAStBC,EAAOD,EAASC,KATM,kBAUrBA,GAVqB,2CAAH,sDAadrB,EAAc,yCAAG,WAAO8B,GAAP,8FACLf,IAAAA,IACrB,gBAASe,EAAT,aACE,IAAIX,gBAAgB,CAClBH,QAAAA,EACAW,SAAU,WALY,cACtBP,EADsB,OAStBC,EAAOD,EAASC,KATM,kBAUrBA,GAVqB,2CAAH,sDAadU,EAAiB,yCAAG,WAAOD,GAAP,8FACRf,IAAAA,IACrB,gBAASe,EAAT,aACE,IAAIX,gBAAgB,CAClBH,QAAAA,EACAW,SAAU,QACVT,KAAM,KANmB,cACzBE,EADyB,OAUzBC,EAAOD,EAASC,KAVS,kBAWxBA,GAXwB,2CAAH,qD","sources":["components/Cast/Cast.styled.ts","components/Cast/Cast.tsx","serverAPI/ServerAPI.ts"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CasList = styled('ul')`\n  list-style: none;\n  padding: 0px 20px 20px;\n  font-size: ${p => p.theme.fontSizes.m}px;\n  & li {\n    padding: ${p => p.theme.space[2]}px;\n  }\n  & li:nth-child(odd) {\n    background: rgb(222, 208, 172);\n  }\n`;\n","import { useState, useEffect } from 'react';\nimport { useOutletContext } from 'react-router-dom';\nimport { animateScroll } from 'react-scroll';\nimport { toast } from 'react-toastify';\nimport { fetchMovieCast } from 'serverAPI';\nimport defaultPhoto from 'images/default.jpeg';\nimport { CasList } from './Cast.styled';\nimport { ICast } from 'types/cast';\n\nconst IMG_PATH = 'https://image.tmdb.org/t/p/w500';\n\nexport default function Cast() {\n  const movieId: string = useOutletContext();\n  const [cast, setCast] = useState<Array<ICast> | null>(null);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const { cast } = await fetchMovieCast(movieId);\n        setCast(cast);\n      } catch (error: any) {\n        toast(error.message);\n      }\n    })();\n  }, [movieId]);\n\n  if (cast) {\n    animateScroll.scrollMore(250);\n  }\n\n  return (\n    <>\n      {cast && (\n        <CasList>\n          {cast.map(({ cast_id, name, profile_path, character }) => {\n            const imgPath = profile_path\n              ? IMG_PATH + profile_path\n              : defaultPhoto;\n            return (\n              <li key={cast_id}>\n                <img src={imgPath} alt={name} width=\"55\" height=\"75\" />\n                <p>{name}</p>\n                <p>Character: {character}</p>\n              </li>\n            );\n          })}\n        </CasList>\n      )}\n    </>\n  );\n}\n","import axios from \"axios\";\naxios.defaults.baseURL = \"https://api.themoviedb.org/3/\";\n\nconst api_key = \"9c009c00402fb866baf05bd346a2d01d\";\ninterface IParams {\n  [x: string]: any;\n};\n\nexport const fetchTrending = async (page: number) => {\n  const response = await axios.get(\n    \"trending/all/day?\" +\n      new URLSearchParams({\n        api_key,\n        page,\n      } as IParams)\n  );\n\n  const data = response.data;\n  return {\n    results: data.results,\n    page: data.page,\n    totalPages: data.total_pages,\n  };\n};\n\nexport const searchMovie = async (query: string, page: number = 1) => {\n  const response = await axios.get(\n    `search/movie?` +\n      new URLSearchParams({\n        api_key,\n        query,\n        language: \"en-US\",\n        page: page,\n        include_adult: false,\n      } as IParams)\n  );\n\n  const data = response.data;\n  return {\n    results: data.results,\n    page: data.page,\n    totalPages: data.total_pages,\n  };\n};\n\nexport const fetchMovieById = async (id: any) => {\n  const response = await axios.get(\n    `movie/${id}?` +\n      new URLSearchParams({\n        api_key,\n        language: \"en-US\",\n      } as IParams)\n  );\n\n  const data = response.data;\n  return data;\n};\n\nexport const fetchMovieCast = async (id: string) => {\n  const response = await axios.get(\n    `movie/${id}/credits?` +\n      new URLSearchParams({\n        api_key,\n        language: \"en-US\",\n      } as IParams)\n  );\n\n  const data = response.data;\n  return data;\n};\n\nexport const fetchMovieReviews = async (id: string) => {\n  const response = await axios.get(\n    `movie/${id}/reviews?` +\n      new URLSearchParams({\n        api_key,\n        language: \"en-US\",\n        page: 1,\n      } as IParams)\n  );\n\n  const data = response.data;\n  return data;\n};\n\n"],"names":["CasList","styled","p","theme","fontSizes","m","space","Cast","movieId","useOutletContext","useState","cast","setCast","useEffect","fetchMovieCast","toast","message","animateScroll","map","cast_id","name","profile_path","character","imgPath","defaultPhoto","src","alt","width","height","axios","api_key","fetchTrending","page","URLSearchParams","response","data","results","totalPages","total_pages","searchMovie","query","language","include_adult","fetchMovieById","id","fetchMovieReviews"],"sourceRoot":""}